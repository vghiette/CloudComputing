{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Architecture for CloudComputing project.",

  "Parameters": {
    "SSHKEYNAME": {
      "Description": "Name of and existing EC2 KeyPair that is allowed SSH access to the VMs",
      "Type": "String",
      "Default": "test"
    },
    "NUMWORKERS": {
      "Description": "Number of Worker instances used.",
      "Type": "Number",
      "Default": "2"
    },
    "NUMSPLITTERS": {
      "Description": "Number of Splitters instances used.",
      "Type": "Number",
      "Default": "2"
    },
    "WORKERINSTANCETYPE": {
      "Description": "Worker instance type needed to be used",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [ "t2.micro","m1.small","m1.medium","m1.large" ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
     "SPLITTERINSTANCETYPE": {
      "Description": "Splitter instance type needed to be used",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [ "t2.micro","m1.small","m1.medium","m1.large" ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
      "BASTIONINSTANCETYPE": {
      "Description": "Bastion instance type needed to be used",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [ "t2.micro" ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
      "WEBCLIENTINSTANCETYPE": {
      "Description": "WebClient instance type needed to be used",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [ "t2.micro" ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "ALLOWADMINSFROM": {
      "Description": "An IP address range that is allowed to both SSH to and make HTTP requests to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "ALLOWADMINSFROM2": {
      "Description": "An IP address range that is allowed to both SSH to and make HTTP requests to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
	"ALLOWVIEWERSFROM": {
      "Description": "An IP address range that is allowed to make HTTP requests to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
	  "Default" : "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings": {
    "DefaultAMIs": {
      "SPLITTERAMI" : {
        "dev"   : "ami-e443f693"
      },
      "WORKERAMI" : {
        "dev"   : "ami-e443f693"
      },
      "WEBCLIENTAMI" : {
        "dev"   : "ami-e443f693"
      }
    }
  },

  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "Tags": [
          {"Key": "Network", "Value": "Public" }
        ]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {"Key": "Network", "Value": "Public" }
        ]
      }
    },

    "AttachGateway": {
       "Type": "AWS::EC2::VPCGatewayAttachment",
       "Properties": {
         "VpcId": { "Ref": "VPC" },
         "InternetGatewayId": { "Ref": "InternetGateway" }
       },
       "DependsOn": "InternetGateway"
    },

    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone" : "eu-west-1a",
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.0.0/24",
        "Tags": [
          {"Key": "Network", "Value": "Public" }
        ]
      },
      "DependsOn": "AttachGateway"
    },

    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone" : "eu-west-1b",
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.3.0/24",
        "Tags": [
          {"Key": "Network", "Value": "Public" }
        ]
      },
      "DependsOn": "AttachGateway"
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Network", "Value": "Public" }
        ]
      }
    },

    "PublicRouteInternetAccessViaGateway": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },

    "PublicSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet1" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },

    "PublicSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet2" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },

    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Network", "Value": "Public" }
        ]
      }
    },

    "InBoundHTTPPort8080ForOutsideWorldPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "223",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "8080", "To": "8080"}
      }
    },

    "InboundHTTPPort80ForAdminsPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref": "ALLOWADMINSFROM" },
        "PortRange": {"From": "80", "To": "80"}
      }
    },

    "InboundHTTPSForAdminsPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref": "ALLOWADMINSFROM" },
        "PortRange": {"From": "443", "To": "443"}
      }
    },
	
	"InboundHTTPPort80ForViewersPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "120",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref": "ALLOWVIEWERSFROM" },
        "PortRange": {"From": "80", "To": "80"}
      }
    },

    "InboundHTTPPort80ForAdmins2PublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "110",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref": "ALLOWADMINSFROM2" },
        "PortRange": {"From": "80", "To": "80"}
      }
    },

    "InboundHTTPSForAdmins2PublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "112",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref": "ALLOWADMINSFROM2" },
        "PortRange": {"From": "443", "To": "443"}
      }
    },


    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "400",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref": "ALLOWADMINSFROM" },
        "PortRange": {"From": "22", "To": "22"}
      }
    },

    "InboundSSHPublic2NetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "600",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref": "ALLOWADMINSFROM2" },
        "PortRange": {"From": "22", "To": "22"}
      }
    },
	
	"InBoundRequestsFromPrivateSubnetPublicNetworkAclEntry1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "800",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "10.0.1.0/24",
        "PortRange": {"From": "1", "To": "65535"}
      }
    },

    "InBoundRequestsFromPrivateSubnetPublicNetworkAclEntry2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "850",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "10.0.2.0/24",
        "PortRange": {"From": "1", "To": "65535"}
      }
    },

    "InBoundSSHResponsesFromNATToBastionInPublicNetwork1AclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "910",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "10.0.0.0/24",
        "PortRange": {"From": "22", "To": "22"}
      }
    },

    "InBoundSSHConnectionFromBastionToNATInPublicNetwork2AclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "920",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "10.0.3.0/24",
        "PortRange": {"From": "1024", "To": "65535"}
      }
    },

    "OutBoundSSHConnectionFromBastionToNATInPublicNetwork2AclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "930",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "10.0.3.0/24",
        "PortRange": {"From": "22", "To": "22"}
      }
    },

    "OutBoundDynamicPortPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "1024", "To": "65535"}
      }
    },

    "OutBoundSSHToPrivateSubnetPublicNetworkAclEntry1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "200",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "10.0.1.0/24",
        "PortRange": {"From": "22", "To": "22"}
      }
    },

    "OutBoundSSHToPrivateSubnetPublicNetworkAclEntry2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "250",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "10.0.2.0/24",
        "PortRange": {"From": "22", "To": "22"}
      }
    },

     "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone" : "eu-west-1a",
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.1.0/24",
        "Tags": [
          {"Key": "Network", "Value": "Private" }
        ]
      }
    },

    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone" : "eu-west-1b",
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.2.0/24",
        "Tags": [
          {"Key": "Network", "Value": "Private" }
        ]
      }
    },

    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Network", "Value": "Private" }
        ]
      }
    },

    "PrivateSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet1" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },

    "PrivateSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet2" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },

    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Network", "Value": "Private" }
        ]
      }
    },

    "InboundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PrivateNetworkAcl"},
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "0", "To": "65535"}
      }
    },

    "OutBoundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PrivateNetworkAcl"},
        "RuleNumber": "300",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {"From": "0", "To": "65535"}
      }
    },

    "PrivateSubnetNetworkAclAssociation1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet1" },
        "NetworkAclId": { "Ref": "PrivateNetworkAcl" }
      }
    },

    "PrivateSubnetNetworkAclAssociation2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet2" },
        "NetworkAclId": { "Ref": "PrivateNetworkAcl" }
      }
    },
	
	"OutBoundSSHToPrivateSubnetPublicNetworkAclEntry1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "200",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "10.0.1.0/24",
        "PortRange": {"From": "22", "To": "22"}
      }
    },
	
	"InBoundRequestsFromPrivateSubnetPublicNetworkAclEntry1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "PublicNetworkAcl"},
        "RuleNumber": "800",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "10.0.1.0/24",
        "PortRange": {"From": "1", "To": "65535"}
      }
    },

    "SplitterLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [ { "Ref": "SplitterLoadBalancerSecurityGroup" } ],
        "Subnets": [{"Ref" : "PublicSubnet1"},{"Ref" :"PublicSubnet2"}],
		"CrossZone": "true",
        "Listeners": [ { "LoadBalancerPort": "8080", "InstancePort": "8080", "Protocol": "HTTP" } ],
        "HealthCheck": {
          "Target": "HTTP:8080/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Interval": "30",
          "Timeout": "10"
        }
      }
    },

    "SplitterLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access on port 80, and HTTPS access on port 443",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "SourceSecurityGroupId": { "Ref": "BastionSecurityGroup" } },
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "SourceSecurityGroupId": { "Ref": "BastionSecurityGroup" } }
        ],
        "SecurityGroupEgress": [
          { "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },

   "SplitterGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones" : ["eu-west-1a","eu-west-1b"],
        "VPCZoneIdentifier": [{"Ref" : "PrivateSubnet1"},{"Ref" :"PrivateSubnet2"}],
        "LaunchConfigurationName": { "Ref": "SplitterLaunchConfig" },
        "MinSize": { "Ref": "NUMSPLITTERS" },
        "MaxSize": { "Ref": "NUMSPLITTERS" },
        "DesiredCapacity": { "Ref": "NUMSPLITTERS" },
        "LoadBalancerNames": [ { "Ref": "SplitterLoadBalancer" } ],
        "Tags": [
          {"Key": "Name", "Value": "Splitter", "PropagateAtLaunch": "true" },
          {"Key": "Network", "Value": "Public", "PropagateAtLaunch": "true" },
          {"Key": "Role", "Value": "Splitter" , "PropagateAtLaunch": "true" }
        ]
      }
    },

    "SplitterLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
	  "Metadata" : {
      "AWS::CloudFormation::Init" : {
        "config" : {
		   "/home/ec-user/code.txt" : {
		     "source" : "https://s3-eu-west-1.amazonaws.com/code-cloud-computing/code.txt",
			 "mode" : "000400",
			 "owner":"ec2-user",
			 "group":"ec2-user"
		   }
		}}},
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "DefaultAMIs", "SPLITTERAMI", "dev" ] },
        "SecurityGroups": [ { "Ref": "SplitterSecurityGroup" } ],
        "InstanceType": { "Ref": "SPLITTERINSTANCETYPE" },
        "KeyName": { "Ref": "SSHKEYNAME" },
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -ex","\n",
          "export AWS_ACCESS_KEY=[ACCESS_KEY]", "\n",
		  "export AWS_ACCESS_SECRET_KEY=[SECRET_KEY]", "\n",
		  "java -jar cloudSearch.jar master $AWS_ACCESS_KEY $AWS_ACCESS_SECRET_KEY s3.eu-central-1.amazonaws.com 8080 0.0.0.0/0", "\n"
        ]]}}
      }
    },

    "SplitterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP (8080), SSH (22) and JMX/RMI (9999) access.",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "SourceSecurityGroupId": { "Ref": "SplitterLoadBalancerSecurityGroup" } },
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "SourceSecurityGroupId": { "Ref": "BastionSecurityGroup" } }
        ]
      }
    },

   "WorkerLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [ { "Ref": "WorkerLoadBalancerSecurityGroup" } ],
        "Subnets": [{"Ref" : "PublicSubnet1"},{"Ref" :"PublicSubnet2"}],
		"CrossZone": "true",
        "Listeners": [ { "LoadBalancerPort": "8080", "InstancePort": "8080", "Protocol": "HTTP" } ],
        "Scheme" : "internal",
        "HealthCheck": {
          "Target": "HTTP:8080/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Interval": "30",
          "Timeout": "10"
        }
      }
    },

    "WorkerLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access on port 80, and HTTPS access on port 443",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "SourceSecurityGroupId": { "Ref": "BastionSecurityGroup" } }
        ],
        "SecurityGroupEgress": [
          { "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },


    "WorkerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones" : ["eu-west-1a","eu-west-1b"],
        "VPCZoneIdentifier": [{"Ref" : "PrivateSubnet1"},{"Ref" :"PrivateSubnet2"}],
        "LaunchConfigurationName": { "Ref": "WorkerLaunchConfig" },
        "MinSize": { "Ref": "NUMWORKERS" },
        "MaxSize": { "Ref": "NUMWORKERS" },
        "DesiredCapacity": { "Ref": "NUMWORKERS" },
        "LoadBalancerNames": [ { "Ref": "WorkerLoadBalancer" } ],
        "Tags": [
          {"Key": "Name", "Value": "Worker", "PropagateAtLaunch": "true" },
          {"Key": "Network", "Value": "Private", "PropagateAtLaunch": "true" },
          {"Key": "Role", "Value": "Worker" , "PropagateAtLaunch": "true" }
        ]
      }
    },

    "WorkerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
	  "Metadata" : {
      "AWS::CloudFormation::Init" : {
        "config" : {
		    "files":{
		   "/home/ec-user/code.txt" : {
		     "source" : "https://s3-eu-west-1.amazonaws.com/code-cloud-computing/code.txt",
			 "mode" : "000400",
			 "owner":"root",
			 "group":"root"
		   }
		}}}},
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "DefaultAMIs", "WORKERAMI", "dev" ] },
        "SecurityGroups": [ { "Ref": "WorkerSecurityGroup" } ],
        "InstanceType": { "Ref": "WORKERINSTANCETYPE" },
        "KeyName": { "Ref": "SSHKEYNAME" },
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -ex","\n",
          "export AWS_ACCESS_KEY=[ACCESS_KEY]", "\n",
		  "export AWS_ACCESS_SECRET_KEY=[SECRET_KEY]", "\n",
		  "java -jar cloudSearch.jar slave $AWS_ACCESS_KEY $AWS_ACCESS_SECRET_KEY s3.eu-central-1.amazonaws.com 8080 0.0.0.0/0", "\n"
        ]]}}
      }
    },

    "WorkerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP (8080), SSH (22) and JMX/RMI (9999) access.",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "SourceSecurityGroupId": { "Ref": "WorkerLoadBalancerSecurityGroup" } },
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "SourceSecurityGroupId": { "Ref": "BastionSecurityGroup" } }
        ]
      }
    },

    "Bastion": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "DefaultAMIs", "WORKERAMI", "dev" ] },
        "SecurityGroupIds": [{ "Ref": "BastionSecurityGroup" }],
        "SubnetId": { "Ref": "PublicSubnet1" },
		"KeyName": { "Ref": "SSHKEYNAME" },
        "InstanceType": { "Ref" : "WORKERINSTANCETYPE" },
        "Tags": [
          {"Key": "Name", "Value": "Bastion" },
          {"Key": "Network", "Value": "Private"},
          {"Key": "Role", "Value": "BastionServer" }
        ],
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -ex","\n",
          "\n"
        ]]}}
      }
    },

    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "ALLOWADMINSFROM" }},
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "ALLOWADMINSFROM2" }}
        ]
      }
    },

    "BastionPublicIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "Bastion" }
      }
    },
	
      "WebClient": {
      "Type": "AWS::EC2::Instance",
	  "Metadata" : {
      "AWS::CloudFormation::Init" : {
        "config" : {
		   "files":{
		   "/home/ec2-user/code.txt" : {
		     "source" : "https://s3-eu-west-1.amazonaws.com/code-cloud-computing/code.txt",
			 "mode" : "000400",
			 "owner":"ec2-user",
			 "group":"ec2-user"
		   }
		}}}},
      "Properties": {
        "ImageId": "ami-e443f693",
        "SecurityGroupIds": [{ "Ref": "WebClientSecurityGroup" }],
        "SubnetId": { "Ref": "PublicSubnet1" },
	    "KeyName": { "Ref": "SSHKEYNAME" },
        "InstanceType": { "Ref" : "WEBCLIENTINSTANCETYPE" },
        "Tags": [
          {"Key": "Name", "Value": "WebClient" },
          {"Key": "Network", "Value": "Public"},
          {"Key": "Role", "Value": "WebClient" }
        ],
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -ex","\n",
          "export AWS_ACCESS_KEY=[ACCESS_KEY]", "\n",
		  "export AWS_ACCESS_SECRET_KEY=[SECRET_KEY]", "\n",
		  "java -jar cloudSearch.jar slave $AWS_ACCESS_KEY $AWS_ACCESS_SECRET_KEY s3.eu-central-1.amazonaws.com 8080 0.0.0.0/0", "\n"
        ]]}}
      }
    },

    "WebClientSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "ALLOWADMINSFROM" }},
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "ALLOWADMINSFROM2" }},
		  {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "ALLOWVIEWERSFROM" }},
		  { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "SourceSecurityGroupId": { "Ref": "BastionSecurityGroup" } }
        ]
      }
    },

    "WebClientPublicIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "WebClient" }
      }
    },
	
	"PrivateRouteInternetAccessViaNAT": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": { "Ref": "NATInstance" }
      }
    },

    "NATEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "NATInstance" }
      }
    },
	
	"NATInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.micro" ,
        "KeyName" : { "Ref" : "SSHKEYNAME" },
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "SourceDestCheck" : "false",
        "ImageId" : "ami-14913f63",
        "SecurityGroupIds" : [{ "Ref" : "NATSecurityGroup" }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ "NAT #1", { "Ref": "AWS::StackName" } ] ] } },
          { "Key" : "Network", "Value": "Public" },
          { "Key" : "Role", "Value": "NAT" }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws*\n",
          ". /etc/profile.d/aws-apitools-common.sh\n",
          "# Configure iptables\n",
          "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE\n",
          "/sbin/iptables-save > /etc/sysconfig/iptables\n",
          "# Configure ip forwarding and redirects\n",
          "echo 1 >  /proc/sys/net/ipv4/ip_forward && echo 0 >  /proc/sys/net/ipv4/conf/eth0/send_redirects\n",
          "mkdir -p /etc/sysctl.d/\n",
          "cat <<EOF > /etc/sysctl.d/nat.conf\n",
          "net.ipv4.ip_forward = 1\n",
          "net.ipv4.conf.eth0.send_redirects = 0\n",
          "EOF\n",
          "sleep 180\n",
          "NAT_ID=\n",
          "# CloudFormation should have updated the PrivateRouteTable by now (due to yum update), however loop to make sure\n",
          "while [ \"$NAT_ID\" == \"\" ]; do\n",
          "  sleep 60\n",
          "  NAT_ID=`/opt/aws/bin/ec2-describe-route-tables ", { "Ref" : "PrivateRouteTable" },
          " -U https://ec2.", { "Ref" : "AWS::Region" }, ".amazonaws.com | grep 0.0.0.0/0 | awk '{print $2;}'`\n",
          "  #echo `date` \"-- NAT_ID=$NAT_ID\" >> /tmp/test.log\n",
          "done\n"
        ]]}}
      }
    },
	
	"NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Rules for allowing access to HA Nodes",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "SourceSecurityGroupId": { "Ref": "BastionSecurityGroup" }},
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "SourceSecurityGroupId": { "Ref": "WorkerSecurityGroup" }},
          {"IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "SourceSecurityGroupId": { "Ref": "WorkerSecurityGroup" }},
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "SourceSecurityGroupId": { "Ref": "SplitterSecurityGroup" }},
          {"IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "SourceSecurityGroupId": { "Ref": "SplitterSecurityGroup" }},
          {"IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "SourceSecurityGroupId": { "Ref": "SplitterSecurityGroup" }}
         ]
      }
    },
	
	"AlertsStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3-eu-west-1.amazonaws.com/code-cloud-computing/vpc-alerts.json",
        "TimeoutInMinutes": "10",
        "Parameters": {
          "WORKERLOADBALANCER": {"Ref": "WorkerLoadBalancer"},
          "WORKERGROUP": {"Ref": "WorkerGroup"},
          "SPLITTERLOADBALANCER": {"Ref": "SplitterLoadBalancer"},
          "SPLITTERGROUP": {"Ref": "SplitterGroup"},
          "BASTION": {"Ref": "Bastion"},
          "WEBCLIENT": {"Ref": "WebClient"},
		  "ScalingUpAdjustment": "200",
		  "ScalingDownAdjustment": "30",
		  "ScaleUpCooldown": "420",
		  "ScaleDownCooldown": "120"
        }
      }
    }
  },

  "Outputs": {
    "WorkerLoadBalancerURL": {
      "Description": "Worker loadbalancer URL",
      "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "WorkerLoadBalancer", "DNSName" ] }, "/"] ] }
    },
    "SplitterLoadBalancerHostName": {
      "Value": { "Fn::GetAtt": [ "SplitterLoadBalancer", "DNSName" ] }
    },
    "WebClientPublicIPAddress" : {
	  "Value": { "Ref" : "WebClientPublicIPAddress" }
    },
    "BastionPublicIPAddress" : {
	  "Value": { "Ref" : "BastionPublicIPAddress" }
    },
    "VpcId": {
      "Value": { "Ref": "VPC" }
    }
  }
}
